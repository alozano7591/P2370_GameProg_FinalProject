/* Alfredo Lozano
 * 5397591
 * alozano7591@conestogac.on.ca
 * Final Project: The Charge:
 * 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System.Drawing;
using TestProject_01.Scenes;
using Color = Microsoft.Xna.Framework.Color;
using Microsoft.Xna.Framework.Media;
using TestProject_01.Managers;

namespace TestProject_01
{
    /// <summary>
    /// Autogenerated by Monogame. Used for starting up the game.
    /// </summary>
    public class Game1 : Game
    {
        public GraphicsDeviceManager _graphics;
        public SpriteBatch _spriteBatch;

        //public bool gamePaused = false;

        //declare scenes
        public StartScene startScene;
        public ActionScene actionScene;
        public HelpScene helpScene;
        public CreditsScene creditsScene;
        public HighscoreScene highscoreScene;

        public static GameScene ACTIVESCENE;

        //character 
        PlayerTestie player;
        TileManager tileManager;

        //set up content manager
        public SContentManager _contentManager;

        //set up screen
        public bool fullScreenOn = false;
        public bool res720On = true;

        //used to give a cool down between menu changes
        //prevents fast changing between scenes 
        int coolDown = 30;
        int coolDownCount = 0;
        bool coolDownOn = false;

        private KeyboardState oldState;

        /// <summary>
        /// Basic constructor for game
        /// </summary>
        public Game1()
        {
            _graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            IsMouseVisible = true;
        }
        
        /// <summary>
        /// Do the starting setup
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            if(res720On)
            {
                _graphics.PreferredBackBufferWidth = 1280;
                _graphics.PreferredBackBufferHeight = 720;
                _graphics.ApplyChanges();
            }
            else if(fullScreenOn)
            {
                _graphics.PreferredBackBufferWidth = GraphicsDevice.Adapter.CurrentDisplayMode.Width;
                _graphics.PreferredBackBufferHeight = GraphicsDevice.Adapter.CurrentDisplayMode.Height;
                _graphics.ApplyChanges();
            }

            _contentManager = new SContentManager(this);

            Shared.stage = new Vector2(_graphics.PreferredBackBufferWidth, _graphics.PreferredBackBufferHeight);
            Shared.SetMidpoint();

            base.Initialize();
        }

        /// <summary>
        /// Load our content, like textures and sound
        /// </summary>
        protected override void LoadContent()
        {
            _spriteBatch = new SpriteBatch(GraphicsDevice);

            // TODO: use this.Content to load your game content here
            _contentManager.LoadImages();
            _contentManager.LoadSounds();


            //load scenes here:
            //create scene instances here
            startScene = new StartScene(this);
            this.Components.Add(startScene);
            startScene.show();
            ACTIVESCENE = startScene;
            SContentManager.instance.PlayMusic(SContentManager.instance.titleSong, .7f);

            helpScene = new HelpScene(this);
            this.Components.Add(helpScene);

            creditsScene = new CreditsScene(this);
            this.Components.Add(creditsScene);

            highscoreScene = new HighscoreScene(this);
            this.Components.Add(highscoreScene);

            actionScene = new ActionScene(this);
            this.Components.Add(actionScene);
            //actionScene.show();

        }

        /// <summary>
        /// hide all of our scenes
        /// </summary>
        private void hideAllScenes()
        {
            foreach (GameComponent item in Components)
            {
                if (item is GameScene)
                {
                    GameScene gs = (GameScene)item;
                    gs.hide();

                }

            }
        }

        /// <summary>
        /// update loop
        /// </summary>
        /// <param name="gameTime"></param>
        protected override void Update(GameTime gameTime)
        {
            //if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
            //    Exit();

            int selectedIndex = 0;
            KeyboardState ks = Keyboard.GetState();

            //ACTIVESCENE = null;


            if (startScene.Enabled && coolDownOn == false)
            {
                selectedIndex = startScene.menu.selectedIndex;
                if (selectedIndex == 0 && ks.IsKeyDown(Keys.Enter))
                {

                    GoToScene(actionScene, false);
                }
                else if (selectedIndex == 1 && ks.IsKeyDown(Keys.Enter))
                {

                    GoToScene(helpScene, false);

                }
                else if (selectedIndex == 2 && ks.IsKeyDown(Keys.Enter))
                {

                    GoToScene(highscoreScene, false);
                }
                else if (selectedIndex == 3 && ks.IsKeyDown(Keys.Enter))
                {

                    GoToScene(creditsScene, false);
                }
                //take care of other transitions;

                else if (selectedIndex == 4 && ks.IsKeyDown(Keys.Enter))
                {
                    Exit();
                }

            }
            else if(actionScene.Enabled && actionScene.pauseMenuComponent.Enabled && coolDownOn == false) 
            {
                selectedIndex = actionScene.pauseMenuComponent.selectedIndex;
                if (selectedIndex == 0 && ks.IsKeyDown(Keys.Enter))
                {
                    actionScene.TogglePauseMenu(false);
                }
                else if (selectedIndex == 1 && ks.IsKeyDown(Keys.Enter))
                {

                    GoToScene(startScene, true);
                }
                else if (selectedIndex == 2 && ks.IsKeyDown(Keys.Enter))
                {
                    Exit();
                }
            }
            if (helpScene.Enabled || creditsScene.Enabled || highscoreScene.Enabled
                )
            {
                if (ks.IsKeyDown(Keys.Escape))
                {
                    //we don't call the gotoscene function here because that will restart the music, we don't want that
                    //hideAllScenes();
                    //startScene.show();
                    //ACTIVESCENE = startScene;
                    GoToScene(startScene, false);
                }

            }
            if(actionScene.Enabled && actionScene.pauseMenuComponent.Enabled != true)
            {
                if(ks.IsKeyDown(Keys.Escape) && oldState.IsKeyUp(Keys.Escape))
                {
                    actionScene.TogglePauseMenu(true);
                }
                
            }
            else if(actionScene.Enabled && actionScene.pauseMenuComponent.Enabled)
            {
                if (ks.IsKeyDown(Keys.Escape) && oldState.IsKeyUp(Keys.Escape))
                {
                    actionScene.TogglePauseMenu(false);
                }
            }


            if (coolDownOn)
            {
                if(coolDownCount >= coolDown)
                {
                    coolDownOn= false;
                }
                else
                {
                    coolDownCount++;
                }
                
            }

            // TODO: Add your update logic here
            oldState = ks;

            base.Update(gameTime);
        }

        /// <summary>
        /// Call this to go to a specific scene
        /// </summary>
        /// <param name="scene"></param>
        public void GoToScene(GameScene scene, bool restartSong)
        {

            if (scene == startScene)
            {
                //gamePaused = false;
                hideAllScenes();
                startScene.show();
                //SContentManager.instance.PlayMusic(SContentManager.instance.titleSong, .9f);
                if(restartSong)
                {
                    SContentManager.instance.KeepSpecificSong(SContentManager.instance.titleSong, .9f);
                }
               
            }
            else if(scene == helpScene)
            {
                //gamePaused = false;
                hideAllScenes();
                helpScene.show();
            }
            else if(scene == creditsScene)
            {
                //gamePaused = false;
                hideAllScenes();
                creditsScene.show();
            }
            else if(scene == highscoreScene)
            {
                //gamePaused = false;
                hideAllScenes();
                highscoreScene.show();

                if (restartSong)
                {
                    SContentManager.instance.KeepSpecificSong(SContentManager.instance.titleSong, .9f);
                }
            }
            else if(scene == actionScene)
            {
                //gamePaused = false;
                hideAllScenes();
                actionScene.show();
                actionScene.RestartScene();
                SContentManager.instance.PlayMusic(SContentManager.instance.gameSong1, 1f);
                ACTIVESCENE = actionScene;
            }

            coolDownCount = 0;
            coolDownOn = true;

            ACTIVESCENE = scene;
        }

        /// <summary>
        /// draw override to show our sprites. in this instance we are just setting up our background
        /// </summary>
        /// <param name="gameTime"></param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            // TODO: Add your drawing code here

            base.Draw(gameTime);
        }


    }
}